#!/usr/bin/env bash

src=/usr/src/control-repo

if ! test -d "${src}" ; then
  echo >&2 "Location of sample pdk repo $src not found"
  exit 1
fi

BUNDLER_VERSION=$(tail -n1 "${src}/Gemfile.lock")
if [[ -z "${BUNDLER_VERSION}" ]] ; then
  echo >&2 "Unable to get bunder version from ${src}/Gemfile.lock"
  exit 2
fi
export BUNDLER_VERSION

getsecret() {
  eyaml decrypt -e "${src}"/data/secrets.yaml \
  | sed -n -e "/secrets::$1:/"'s/^.*PKCS7\[\(.*\)\]!/\1/p'
}
declare -x GITHUB_TOKEN
GITHUB_TOKEN=$(getsecret github_token)
if [[ -z "${GITHUB_TOKEN}" ]] ; then
  echo >&2 "Unable to get GITHUB_TOKEN from secrets"
  exit 3
fi
 
managed_modules=$(mktemp --suffix .managed_modules.yml)
pdksync=$(mktemp --suffix .pdksync.yml)
managed_modules="managed_modules.yml"
pdksync="pdksync.yml"
finish() { rm -rf "${managed_modules}" "${pdksync}"; }
trap finish exit

runsync() {
  local branch=$1
  shift
  local modules=("$@")

  {
    printf -- '---\n'
    printf -- "- %s\n"  "${modules[@]}"
  } > "${managed_modules}"
  echo "running pdksync on modules:" >&2
  cat "${managed_modules}" >&2

  {
    printf -- '---\n'
    printf "namespace: 'mergwyn'\n"
    printf  "create_pr_against: '%s'\n" "${branch}"
    printf  "managed_modules: '%s'\n" "${managed_modules}"
  } > "${pdksync}"
  echo "running pdksync with config:" >&2
  cat "${pdksync}" >&2

  PDKSYNC_CONFIG_PATH="${pdksync}" bundle exec rake pdksync
}

mymodules=(
mergwyn-backuppc
mergwyn-ddclient
mergwyn-jackett
mergwyn-managedmac
mergwyn-radarr
mergwyn-xteve
)

runsync master "${mymodules[@]}"

runsync production "control-repo"
